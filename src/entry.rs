use tls_codec_derive::{TlsDeserialize, TlsSerialize, TlsSize};

#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
// MerkleTreeLeaf is described in S3.4.
struct MerkleTreeLeaf {
    version: u8,
    signed_entry: MerkleLeaf,
}

#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
#[repr(u8)]
enum MerkleLeaf {
    #[tls_codec(discriminant = 0)]
    TimeStampedEntry(TimeStampedEntry),
}

#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
// TimeStampedEntry is described in S3.4.
struct TimeStampedEntry {
    timestamp: u64, // Milliseconds since epoch
    log_entry: LogEntry,
    extensions: tls_codec::TlsByteVecU16,
}

// LogEntry is the LogEntryType and signed_entry
// It occurs in both the SignedCertificateTimestamp and TimeStampedEntry
#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
#[repr(u16)]
enum LogEntry {
    #[tls_codec(discriminant = 0)]
    X509Entry(Asn1Cert),
    #[tls_codec(discriminant = 1)]
    PrecertEntry(PreCert),
}

#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
struct Asn1Cert {
    opaque: crate::tlsvec24::TlsVec24<u8>,
}

// PreCert is defined in S3.2.
#[derive(TlsSerialize, TlsDeserialize, TlsSize, PartialEq, Debug, Clone)]
struct PreCert {
    issuer_key_hash: [u8; 32],
    tbs_certificate: tls_codec::TlsVecU32<u8>,
}

#[test]
fn test() {
    use tls_codec::Deserialize;

    // https://oak.ct.letsencrypt.org/2022/ct/v1/get-entries?start=5000&end=5000
    let mut x509 = &[
        0x00u8, // Version 0
        0x00,   // Timestamped Entry
        0x00, 0x00, 0x01, 0x69, 0x11, 0xb1, 0x70, 0xb2, // u64 millis timestamp
        0x00, 0x00, // x509 entry
        0x00, 0x02, 0x60, // 24 bit length = 608
        // ASN.1 DER Cert:
        0x30, 0x82, 0x02, 0x5c, 0x30, 0x82, 0x02, 0x01, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08,
        0x48, 0xf2, 0x53, 0x20, 0xbf, 0x90, 0x3a, 0xdf, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48,
        0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x13, 0x16, 0x63, 0x74, 0x2d, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65,
        0x72, 0x20, 0x43, 0x41, 0x35, 0x31, 0x62, 0x34, 0x61, 0x34, 0x30, 0x1e, 0x17, 0x0d, 0x32,
        0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32,
        0x32, 0x31, 0x32, 0x33, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x38, 0x31,
        0x36, 0x30, 0x34, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x2d, 0x34, 0x38, 0x66, 0x32, 0x35,
        0x33, 0x32, 0x30, 0x62, 0x66, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65,
        0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x74, 0x73, 0x65,
        0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x59, 0x30, 0x13, 0x06,
        0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
        0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x91, 0xaf, 0x0d, 0x01, 0xe9, 0xf0, 0x14, 0xf4,
        0x98, 0x0f, 0x38, 0x18, 0xf3, 0xb6, 0x78, 0xb7, 0x1b, 0x82, 0xed, 0xd4, 0xc2, 0xcf, 0x6c,
        0x27, 0xe3, 0x60, 0xc7, 0x72, 0xfd, 0x6b, 0x94, 0x86, 0xbd, 0x6d, 0x96, 0xe5, 0xba, 0x5c,
        0x43, 0x67, 0xfe, 0x4a, 0xcb, 0x06, 0x1b, 0x9a, 0xc9, 0x82, 0xd5, 0xac, 0xab, 0xd9, 0x15,
        0x14, 0x83, 0xb1, 0xba, 0xf1, 0x4b, 0xdd, 0xb6, 0x29, 0x06, 0x56, 0xa3, 0x82, 0x01, 0x0a,
        0x30, 0x82, 0x01, 0x06, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04,
        0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30,
        0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06,
        0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01,
        0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x4c, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
        0x01, 0x01, 0x04, 0x40, 0x30, 0x3e, 0x30, 0x3c, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
        0x07, 0x30, 0x02, 0x86, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x73, 0x73,
        0x75, 0x65, 0x72, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e,
        0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63,
        0x72, 0x79, 0x70, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x38, 0x06, 0x03, 0x55, 0x1d, 0x11,
        0x04, 0x31, 0x30, 0x2f, 0x82, 0x2d, 0x34, 0x38, 0x66, 0x32, 0x35, 0x33, 0x32, 0x30, 0x62,
        0x66, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x65,
        0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63, 0x72, 0x79,
        0x70, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x3f, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x38,
        0x30, 0x36, 0x30, 0x34, 0xa0, 0x32, 0xa0, 0x30, 0x86, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a,
        0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x73, 0x2e, 0x77, 0x6f, 0x6f, 0x64, 0x70, 0x65, 0x63, 0x6b,
        0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x74, 0x73,
        0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x30, 0x0a, 0x06, 0x08,
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,
        0x00, 0x80, 0x29, 0xfd, 0x50, 0x9a, 0x10, 0xfb, 0xfa, 0xba, 0x68, 0xa1, 0x3f, 0xaa, 0x29,
        0xb5, 0x99, 0xa0, 0x83, 0xa6, 0x98, 0xb1, 0x7f, 0x06, 0xa5, 0x39, 0xdf, 0x3c, 0x0f, 0x77,
        0xd2, 0x83, 0xc5, 0x02, 0x21, 0x00, 0xda, 0x2f, 0x4a, 0xd5, 0x7a, 0x0f, 0x81, 0x33, 0x17,
        0x33, 0x18, 0xab, 0x8d, 0x16, 0x91, 0x8a, 0x01, 0x18, 0x6d, 0xb5, 0xcb, 0x68, 0xb0, 0xc8,
        0xca, 0x0a, 0xfa, 0x0e, 0x35, 0x0a, 0xf6, 0xd4, // 0-length extensions:
        0x00, 0x00,
    ] as &[u8];

    // use known offsets to get a copy of the cert out
    let extracted_cert = x509[15..15 + 608].to_vec();

    let deserialized = MerkleTreeLeaf::tls_deserialize(&mut x509).expect("should deserialize");

    assert_eq!(0, x509.len(), "should read all data");
    assert_eq!(
        deserialized,
        MerkleTreeLeaf {
            version: 0,
            signed_entry: MerkleLeaf::TimeStampedEntry(TimeStampedEntry {
                timestamp: 1550780035250,
                log_entry: LogEntry::X509Entry(Asn1Cert {
                    opaque: extracted_cert.into(),
                }),
                extensions: vec![].into(),
            })
        }
    );
}
